# -*- coding: utf-8 -*-
"""KMP_Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12X3OjSRAosi_ZkJyC4EEEqLrdTSVm0IF
"""

import time
import random
import string
import matplotlib.pyplot as plt
def compute_prefix_function(pattern):
  m=len(pattern)
  pi=[0]*m
  k=0
  for q in range(1, m):
    while k>0 and pattern[k]!=pattern[q]:
      k=pi[k-1]
    if pattern[k]==pattern[q]:
      k+=1
      pi[q]=k
  return pi

def kmp_matcher(text, pattern):
  n=len(text)
  m=len(pattern)
  pi=compute_prefix_function(pattern)
  q=0
  match_positions=[]
  for i in range(n):
    while q>0 and pattern[q]!=text[i]:
      q=pi[q - 1]
    if pattern[q]==text[i]:
      q+=1
    if q==m:
      match_positions.append(i-m+1)
      q=pi[q - 1]
  return match_positions

def naive_search(text, pattern):
  n=len(text)
  m=len(pattern)
  match_positions=[]
  for i in range(n - m + 1):
    if text[i:i + m]==pattern:
      match_positions.append(i)
  return match_positions

def generate_random_string(length):
  return ''.join(random.choices(string.ascii_lowercase, k=length))

def benchmark_search_algorithm(algorithm, text, pattern):
  start_time=time.time()
  result=algorithm(text, pattern)
  end_time=time.time()
  return end_time-start_time, result

def run_benchmark():
  text_sizes=[1000, 5000, 10000, 20000, 50000, 100000]
  pattern_sizes=[10, 50, 100, 500, 1000]
  naive_times=[]
  kmp_times=[]
  x_values=[]
  for text_size in text_sizes:
    for pattern_size in pattern_sizes:
      text=generate_random_string(text_size)
      pattern=generate_random_string(min(pattern_size, text_size))
      naive_time, _=benchmark_search_algorithm(naive_search, text, pattern)
      kmp_time, _=benchmark_search_algorithm(kmp_matcher, text, pattern)
      naive_times.append(naive_time)
      kmp_times.append(kmp_time)
      x_values.append(text_size)
  return x_values, naive_times, kmp_times

def plot_benchmark_results():
  x_values, naive_times, kmp_times=run_benchmark()
  plt.figure(figsize=(10, 6))
  plt.plot(x_values, naive_times, label='Naive Search', marker='o', color='r', linestyle='--')
  plt.plot(x_values, kmp_times, label='KMP Algorithm', marker='x', color='b', linestyle='-')
  plt.xlabel('Text Size')
  plt.ylabel('Execution Time (seconds)')
  plt.title('Benchmarking: Naive Search vs KMP Algorithm')
  plt.legend()
  plt.grid(True)
  plt.show()

plot_benchmark_results()